114. Flatten Binary Tree to Linked List  QuestionEditorial Solution  My Submissions
Total Accepted: 89170
Total Submissions: 280324
Difficulty: Medium
Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
click to show hints.

Hints:
If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.

my solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if(!root) return;
        TreeNode *curNode = root, *rightNode = root;  
        while(curNode -> left != NULL || curNode -> right != NULL){
            if(curNode -> left != NULL){
                TreeNode *tmp = curNode -> right;
                curNode -> right = curNode -> left;
                curNode -> left = NULL;
                if(tmp){
                    rightNode = curNode;
                    while(rightNode -> right)
                        rightNode = rightNode -> right;
                    rightNode -> right = tmp;
                }
                
            }
            curNode = curNode -> right;
        }
        return;
    }
};