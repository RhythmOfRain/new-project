95. Unique Binary Search Trees II  QuestionEditorial Solution  My Submissions
Total Accepted: 59966
Total Submissions: 203927
Difficulty: Medium
Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

my solution:
由于1~n是升序列，因此建起来的树天然就是BST。

递归思想，依次选择根节点，对左右子序列再分别建树。

由于左右子序列建树的结果也可能不止一种，需要考虑所有搭配情况。

vector<TreeNode *> leftTree代表所有valid左子树。

vector<TreeNode *> rightTree代表所有valid右子树。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n < 1) return {}; 
        return helper(1,n);
    }
    vector<TreeNode*> helper(int begin, int end){
        vector<TreeNode*> res;
        if(begin > end) res.push_back(NULL);
        else if(begin == end){
            TreeNode *root = new TreeNode(begin);
            res.push_back(root);
        }else{
            for(int i = begin; i <= end; ++i){
                auto leftTree = helper(begin, i - 1);
                auto rightTree = helper(i + 1, end);
                for(int l = 0; l < leftTree.size(); ++l)
                    for(int r = 0; r < rightTree.size(); ++r){
                        TreeNode *root = new TreeNode(i);
                        root -> left = leftTree[l];
                        root -> right = rightTree[r];
                        res.push_back(root);
                    }
            }
        }
        return res;
    }
};