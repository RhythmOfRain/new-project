98. Validate Binary Search Tree  QuestionEditorial Solution  My Submissions
Total Accepted: 102350
Total Submissions: 480128
Difficulty: Medium
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.

my solution:
生成中序遍历序列，如果是BST，序列应该是递增的
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(root == NULL) return true;
        helper(root);
        int len = midorder.size();
        for(int i = 1; i < len; ++i){
            if(midorder[i] <= midorder[i - 1])
                return false;
        }
        return true;
        
    }
private:
    vector<int> midorder;
    void helper(TreeNode* root){
        if(root == NULL) return;
        else{
            helper(root -> left);
            midorder.push_back(root -> val);
            helper(root -> right);
        }
        
    }
};